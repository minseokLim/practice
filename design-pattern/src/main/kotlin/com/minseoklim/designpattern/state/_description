기능이 상태에 따라 다르게 동작해야 할 때 사용할 수 있는 패턴이 상태 패턴이다.
상태 패턴에서는 상태를 별도 타입으로 분리하고, 각 상태 별로 알맞은 하위 타입을 구현한다.
상태 패턴에서 중요한 점은 하위 타입으로 구현된 상태 객체가 기능을 제공한다는 점이다.

콘텍스트는 필드로 상태 객체를 갖고 있다.
콘텍스트는 클라이언트로부터 기능 실행 요청을 받으면, 상태 객체에 처리를 위임하는 방식으로 구현된다.

상태 패턴의 장점은 새로운 상태가 추가되더라도 콘텍스트 코드가 받는 영향은 최소화된다는 점이다.

콘텍스트의 상태 변경을 누가 할지는 주어진 상황에 알맞게 정해 주어야 한다.
먼저 콘텍스트에서 상태를 변경하는 방식은 비교적 상태 개수가 적고 상태 변경 규칙이 거의 바뀌지 않는 경우에 유리하다.
왜냐면 상태 종류가 지속적으로 변경되거나 상태 변경 규칙이 자주 바뀔 경우 콘텍스트 상태 변경 처리 코드가 복잡해질 가능성이 높기 때문이다.
상태 변경 처리 코드가 복잡해질 수록 상태 변경의 유연함이 떨어지게 된다.

반면에 상태 객체에서 콘텍스트의 상태를 변경할 경우, 콘텍스트에 영향을 주지 않으면서 상태를 추가하거나 상태 변경 규칙을 바꿀 수 있게 된다.
하지만 상태 변경 규칙이 여러 클래스에 분산되어 있기 때문에, 상태 구현 클래스가 많아질 수록 상태 변경 규칙을 파악하기 어려워질 수 있다.
또한 한 상태 클래스에서 다른 상태 클래스에 대한 의존도 발생한다.

개인적인 생각을 적자면, 상태 변경을 누가 할지에 대한 문제는 enum을 사용하면 해결되지 않을까라는 생각이 든다.
enum을 사용하면 상태 객체에서 콘텍스트의 상태를 변경하면서도 동시에 상태 변경 규칙을 한 클래스에 모아서 볼 수 있다.
