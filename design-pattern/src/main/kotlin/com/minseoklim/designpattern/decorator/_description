데코레이터 패턴은 상속이 아닌 위임을 하는 방식으로 기능을 확장해 나간다.
데코레이터 패턴은 객체의 결합을 통해 기능을 동적으로 유연하게 확장할 수 있게 해준다.
데코레이터 패턴은 프록시 객체를 사용하여 객체에 대한 추가적인 기능을 제공할 때 사용된다.

예시에서는 FileOut(인터페이스)를 구현하면서 동시에 FileOut(인터페이스)를 주입받는 Decorator 클래스를 추상 클래스로 생성하였다.
이 클래스의 doDelegate() 메서드는 생성자를 통해 주입받은 FileOut 객체에 기능을 위임한다.
이후 Decorator 클래스를 상속받는 클래스들은 FileOut의 write() 메서드를 오버라이딩하여 추가적인 기능을 구현하고 doDelegate() 메서드를 호출하여 기능을 위임한다.

데코레이터 패턴의 장점은, 여러 데코레이터들을 조합하는 방식으로 기능을 확장할 수 있다는데에 있다.

데코레이터 패턴을 사용하면 각 확장 기능들의 구현이 별도의 클래스로 분리되기 때문에, 각 확장 기능 및 원래 기능을 서로 영향 없이 변경할 수 있게 된다.
즉, 데코레이터 패턴은 단일 책임 원칙을 지킬 수 있도록 만들어 준다.
